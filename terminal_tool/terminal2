#!/usr/bin/env python3
import sys
import subprocess
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QColor, QTextCursor
from PyQt5.QtWidgets import QApplication, QMainWindow, QTextEdit, QVBoxLayout, QHBoxLayout, QWidget, QLineEdit, QPushButton

class CommandThread(QThread):
    command_output = pyqtSignal(str)

    def __init__(self, command):
        super().__init__()
        self.command = command

    def run(self):
        output = subprocess.run(self.command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.command_output.emit(output.stdout.decode())
        self.command_output.emit(output.stderr.decode())

class Terminal(QTextEdit):
    def __init__(self):
        super().__init__()
        self.setReadOnly(True)
        self.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.setStyleSheet("QTextEdit { background-color: #000000; color: #00ff00; font-family: monospace; }")
        self.command_thread = None

    def run_command(self, command):
        if self.command_thread and self.command_thread.isRunning():
            self.append("\nAnother command is currently running.")
            return
        self.command_thread = CommandThread(command)
        self.command_thread.command_output.connect(self.append)
        self.command_thread.start()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.terminal = Terminal()
        self.setCentralWidget(self.terminal)
        self.setWindowTitle("Linux Terminal")
        self.resize(800, 600)

        self.input_widget = QLineEdit()
        self.input_widget.returnPressed.connect(self.run_command)
        self.run_button = QPushButton("Run")
        self.run_button.clicked.connect(lambda: self.run_command(self.input_widget.text()))
        input_layout = QHBoxLayout()
        input_layout.addWidget(self.input_widget)
        input_layout.addWidget(self.run_button)
        
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.terminal)
        main_layout.addLayout(input_layout)
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

    def run_command(self):
        command = self.input_widget.text()
        self.input_widget.clear()
        self.terminal.append(f"\n$ {command}\n")
        self.terminal.run_command(command)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
